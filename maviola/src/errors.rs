//! Maviola errors.

use std::sync::Arc;

use mavio::errors::{FrameError, MessageError};

/// Maviola result type.
pub type Result<T> = core::result::Result<T, Error>;

/// All errors generated by Maviola.
#[derive(Clone, Debug, thiserror::Error)]
pub enum Error {
    /// [`std::io::Error`] wrapper.
    #[error("I/O error: {0:?}")]
    Io(Arc<std::io::Error>),

    /// Frame encoding/decoding error.
    #[error("frame decoding/encoding error: {0:?}")]
    Frame(FrameError),

    /// Message encoding/decoding and specification discovery error.
    #[error("message decoding/encoding error: {0:?}")]
    Message(MessageError),

    /// Other errors.
    #[error("error: {0}")]
    Other(String),
}

impl From<mavio::errors::CoreError> for Error {
    fn from(value: mavio::errors::CoreError) -> Self {
        match value {
            mavio::errors::CoreError::Io(err) => Self::Io(err),
            mavio::errors::CoreError::Frame(err) => Self::Frame(err),
            mavio::errors::CoreError::Message(err) => Self::Message(err),
        }
    }
}

impl From<MessageError> for Error {
    fn from(value: MessageError) -> Self {
        Error::Message(value)
    }
}

impl From<FrameError> for Error {
    fn from(value: FrameError) -> Self {
        Error::Frame(value)
    }
}

impl From<std::io::Error> for Error {
    fn from(value: std::io::Error) -> Self {
        Self::Io(Arc::new(value))
    }
}

impl<T> From<std::sync::mpsc::SendError<T>> for Error {
    fn from(value: std::sync::mpsc::SendError<T>) -> Self {
        Error::Other(format!("MPSC send error: {value:?}"))
    }
}

impl From<std::sync::mpsc::RecvError> for Error {
    fn from(value: std::sync::mpsc::RecvError) -> Self {
        Error::Other(format!("MPSC recv error: {value:?}"))
    }
}
