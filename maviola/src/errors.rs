//! Maviola errors.

use std::sync::{Arc, PoisonError};

pub use mavio::errors::{FrameError, MessageError};
use mavio::protocol::MessageId;

/// Maviola result type.
pub type Result<T> = core::result::Result<T, Error>;

/// All errors generated by Maviola.
#[derive(Clone, Debug, thiserror::Error)]
pub enum Error {
    /// [`std::io::Error`] wrapper.
    #[error("I/O error: {0:?}")]
    Io(Arc<std::io::Error>),

    /// Frame encoding/decoding error.
    #[error("frame decoding/encoding error: {0:?}")]
    Frame(#[from] FrameError),

    /// Message encoding/decoding and specification discovery error.
    #[error("message decoding/encoding error: {0:?}")]
    Message(MessageError),

    /// Node errors.
    #[error("node error: {0:?}")]
    Node(#[from] NodeError),

    /// Frame building errors.
    #[error("frame building error: {0:?}")]
    FrameBuild(#[from] FrameBuildError),

    /// Other errors.
    #[error("error: {0}")]
    Other(String),
}

/// Node errors.
#[derive(Clone, Debug, thiserror::Error)]
pub enum NodeError {
    /// Transport no longer active error.
    #[error("transport is no longer active")]
    Inactive,
    /// Error within a thread.
    #[error("thread error: {0}")]
    Thread(String),
    /// Failed due to poisoned mutex.
    #[error("poisoned mutex: {0}")]
    Poisoned(String),
    /// Attempt to use a frame with message ID that can't be recognised by a dialect.
    #[error("provided frame with ID = {0} can't be decoded in current dialect {1}")]
    NotInDialect(MessageId, &'static str),
}

/// Frame building errors.
#[derive(Clone, Debug, thiserror::Error)]
pub enum FrameBuildError {
    /// Attempt to use a frame with message ID that can't be recognised by a dialect.
    #[error("provided frame with ID = {0} can't be decoded in current dialect {1}")]
    NotInDialect(MessageId, &'static str),
}

impl From<mavio::errors::Error> for Error {
    fn from(value: mavio::errors::Error) -> Self {
        match value {
            mavio::errors::Error::Io(err) => Self::Io(err),
            mavio::errors::Error::Frame(err) => Self::Frame(err),
            mavio::errors::Error::Message(err) => Self::Message(err),
        }
    }
}

impl From<MessageError> for Error {
    fn from(value: MessageError) -> Self {
        Error::Message(value)
    }
}

impl<Guard> From<PoisonError<Guard>> for Error {
    fn from(value: PoisonError<Guard>) -> Self {
        Error::Node(NodeError::Poisoned(format!("{:?}", value)))
    }
}

impl From<std::io::Error> for Error {
    fn from(value: std::io::Error) -> Self {
        Self::Io(Arc::new(value))
    }
}

impl<T> From<std::sync::mpsc::SendError<T>> for Error {
    fn from(value: std::sync::mpsc::SendError<T>) -> Self {
        Error::Other(format!("MPSC send error: {value:?}"))
    }
}

impl From<std::sync::mpsc::RecvError> for Error {
    fn from(value: std::sync::mpsc::RecvError) -> Self {
        Error::Other(format!("MPSC recv error: {value:?}"))
    }
}
